//=============================================================================
//
// 爆発処理 [explosion.cpp]
// Author : Suzuki Mahiro
//
//=============================================================================

//*****************************************************************************
//インクルードファイル
//*****************************************************************************
#include "explosion.h"
#include "scene2d.h"
#include "manager.h"
#include "renderer.h"
#include "sound.h"

//*****************************************************************************
//マクロ定義
//*****************************************************************************
#define EXPLOSION_SIZE		(D3DXVECTOR3(50.0f,50.0f,0.0f))	//爆発の大きさ
#define ANIMATION_SPEED		(5.0f)							//アニメーションの速さ
#define ANIMATION_PATTERN	(8.0f)							//アニメーションの行数
#define ANIMATION_LINE		(1.0f)							//アニメーションの列数

//*****************************************************************************
//静的メンバ変数
//*****************************************************************************
LPDIRECT3DTEXTURE9 CExplosion::m_pTexture = NULL;

//*****************************************************************************
//コンストラクタ
//*****************************************************************************
CExplosion::CExplosion()
{
}

//*****************************************************************************
//デストラクタ
//*****************************************************************************
CExplosion::~CExplosion()
{
}

//*****************************************************************************
//爆発の生成
//*****************************************************************************
CExplosion *CExplosion::Create(D3DXVECTOR3 pos, CSound::SOUND_LABEL SoundLabel)
{
	//爆発のメモリ確保
	CExplosion *pExplosion = new CExplosion;

	//爆発の初期化処理
	pExplosion->Init(pos);

	//爆発音の再生
	CSound *pSound = CManager::GetSound();
	pSound->Play(SoundLabel);

	return pExplosion;
}

//*****************************************************************************
//ロード処理
//*****************************************************************************
HRESULT CExplosion::Load(void)
{
	LPDIRECT3DDEVICE9 pDevice = CManager::GetRenderer()->GetDevice();

	// テクスチャの読み込み
	D3DXCreateTextureFromFile(pDevice, "Textures/explosion.png", &m_pTexture);

	return S_OK;
}

//*****************************************************************************
//アンロード処理
//*****************************************************************************
void CExplosion::Unload(void)
{
	// テクスチャの破棄
	if (m_pTexture != NULL)
	{
		m_pTexture->Release();
		m_pTexture = NULL;
	}
}

//*****************************************************************************
//初期化処理
//*****************************************************************************
HRESULT CExplosion::Init(D3DXVECTOR3 pos)
{
	//オブジェクトの種類の設定
	SetObjType(OBJTYPE_EXPLOSION);

	//爆発の設定処理
	SetExplosion(pos);

	//サイズの設定
	CScene2D::SetSize(EXPLOSION_SIZE);

	//爆発テクスチャのアニメーション
	CScene2D::InitAnimation(ANIMATION_SPEED, ANIMATION_PATTERN, ANIMATION_LINE);

	//シーン2Dの初期化処理
	CScene2D::Init();

	//テクスチャの設定
	CScene2D::BindTexture(m_pTexture);

	return S_OK;
}

//*****************************************************************************
//終了処理
//*****************************************************************************
void CExplosion::Uninit(void)
{
	//シーン2Dの終了処理
	CScene2D::Uninit();
}

//*****************************************************************************
//更新処理
//*****************************************************************************
void CExplosion::Update(void)
{
	D3DXVECTOR3 pos = CScene2D::GetPos();

	//ポジションの設定
	SetPos(pos);

	//シーン2Dの更新処理
	CScene2D::Update();

	//アニメーションの更新処理
	UpdateAnimation(ANIMATION_UNREPEAT, NOT_INVERSION);
}

//*****************************************************************************
//描画処理
//*****************************************************************************
void CExplosion::Draw(void)
{
	//シーンの描画処理
	CScene2D::Draw();
}

//*****************************************************************************
//設定処理
//*****************************************************************************
void CExplosion::SetExplosion(D3DXVECTOR3 pos)
{
	SetPos(pos);
}